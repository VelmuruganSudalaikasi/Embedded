

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Sep 16 09:33:44 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 22/03/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0000                     	;# 
    49     0001                     	;# 
    50     0002                     	;# 
    51     0003                     	;# 
    52     0004                     	;# 
    53     0005                     	;# 
    54     0006                     	;# 
    55     0007                     	;# 
    56     0008                     	;# 
    57     0009                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000D                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0015                     	;# 
    72     0016                     	;# 
    73     0017                     	;# 
    74     0018                     	;# 
    75     0019                     	;# 
    76     001A                     	;# 
    77     001B                     	;# 
    78     001B                     	;# 
    79     001C                     	;# 
    80     001D                     	;# 
    81     001E                     	;# 
    82     001F                     	;# 
    83     0081                     	;# 
    84     0085                     	;# 
    85     0086                     	;# 
    86     0087                     	;# 
    87     0088                     	;# 
    88     0089                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     0091                     	;# 
    93     0092                     	;# 
    94     0093                     	;# 
    95     0094                     	;# 
    96     0098                     	;# 
    97     0099                     	;# 
    98     009C                     	;# 
    99     009D                     	;# 
   100     009E                     	;# 
   101     009F                     	;# 
   102     010C                     	;# 
   103     010D                     	;# 
   104     010E                     	;# 
   105     010F                     	;# 
   106     018C                     	;# 
   107     018D                     	;# 
   108     0000                     	;# 
   109     0001                     	;# 
   110     0002                     	;# 
   111     0003                     	;# 
   112     0004                     	;# 
   113     0005                     	;# 
   114     0006                     	;# 
   115     0007                     	;# 
   116     0008                     	;# 
   117     0009                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000D                     	;# 
   122     000E                     	;# 
   123     000E                     	;# 
   124     000F                     	;# 
   125     0010                     	;# 
   126     0011                     	;# 
   127     0012                     	;# 
   128     0013                     	;# 
   129     0014                     	;# 
   130     0015                     	;# 
   131     0015                     	;# 
   132     0016                     	;# 
   133     0017                     	;# 
   134     0018                     	;# 
   135     0019                     	;# 
   136     001A                     	;# 
   137     001B                     	;# 
   138     001B                     	;# 
   139     001C                     	;# 
   140     001D                     	;# 
   141     001E                     	;# 
   142     001F                     	;# 
   143     0081                     	;# 
   144     0085                     	;# 
   145     0086                     	;# 
   146     0087                     	;# 
   147     0088                     	;# 
   148     0089                     	;# 
   149     008C                     	;# 
   150     008D                     	;# 
   151     008E                     	;# 
   152     0091                     	;# 
   153     0092                     	;# 
   154     0093                     	;# 
   155     0094                     	;# 
   156     0098                     	;# 
   157     0099                     	;# 
   158     009C                     	;# 
   159     009D                     	;# 
   160     009E                     	;# 
   161     009F                     	;# 
   162     010C                     	;# 
   163     010D                     	;# 
   164     010E                     	;# 
   165     010F                     	;# 
   166     018C                     	;# 
   167     018D                     	;# 
   168                           
   169                           	psect	idataCOMMON
   170     076C                     __pidataCOMMON:
   171                           
   172                           ;initializer for _data_c
   173     076C  3407               	retlw	7
   174     076D  3400               	retlw	0
   175                           
   176                           ;initializer for _data_b
   177     076E  3406               	retlw	6
   178     076F  3400               	retlw	0
   179                           
   180                           ;initializer for _op_reg
   181     0770  3481               	retlw	129
   182     0771  3400               	retlw	0
   183                           
   184                           ;initializer for _dir_c
   185     0772  3487               	retlw	135
   186     0773  3400               	retlw	0
   187                           
   188                           ;initializer for _dir_b
   189     0774  3486               	retlw	134
   190     0775  3400               	retlw	0
   191                           
   192                           	psect	nvCOMMON
   193     007C                     __pnvCOMMON:
   194     007C                     _val:
   195     007C                     	ds	1
   196                           
   197                           	psect	cinit
   198     07C0                     start_initialization:	
   199                           ; #config settings
   200                           
   201     07C0                     __initialization:
   202                           
   203                           ; Initialize objects allocated to COMMON
   204     07C0  120A  118A  276C  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   205     07C5  00F0               	movwf	__pdataCOMMON& (0+127)
   206     07C6  120A  118A  276D  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   207     07CB  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   208     07CC  120A  118A  276E  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   209     07D1  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   210     07D2  120A  118A  276F  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   211     07D7  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   212     07D8  120A  118A  2770  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   213     07DD  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   214     07DE  120A  118A  2771  120A  118A  	fcall	__pidataCOMMON+5	;fetch initializer
   215     07E3  00F5               	movwf	(__pdataCOMMON+5)& (0+127)
   216     07E4  120A  118A  2772  120A  118A  	fcall	__pidataCOMMON+6	;fetch initializer
   217     07E9  00F6               	movwf	(__pdataCOMMON+6)& (0+127)
   218     07EA  120A  118A  2773  120A  118A  	fcall	__pidataCOMMON+7	;fetch initializer
   219     07EF  00F7               	movwf	(__pdataCOMMON+7)& (0+127)
   220     07F0  120A  118A  2774  120A  118A  	fcall	__pidataCOMMON+8	;fetch initializer
   221     07F5  00F8               	movwf	(__pdataCOMMON+8)& (0+127)
   222     07F6  120A  118A  2775  120A  118A  	fcall	__pidataCOMMON+9	;fetch initializer
   223     07FB  00F9               	movwf	(__pdataCOMMON+9)& (0+127)
   224     07FC                     end_of_initialization:	
   225                           ;End of C runtime variable initialization code
   226                           
   227     07FC                     __end_of__initialization:
   228     07FC  0183               	clrf	3
   229     07FD  120A  118A  2F89   	ljmp	_main	;jump to C main() function
   230                           
   231                           	psect	dataCOMMON
   232     0070                     __pdataCOMMON:
   233     0070                     _data_c:
   234     0070                     	ds	2
   235     0072                     _data_b:
   236     0072                     	ds	2
   237     0074                     _op_reg:
   238     0074                     	ds	2
   239     0076                     _dir_c:
   240     0076                     	ds	2
   241     0078                     _dir_b:
   242     0078                     	ds	2
   243                           
   244                           	psect	inittext
   245     0776                     init_fetch0:	
   246                           ;	Called with low address in FSR and high address in W
   247                           
   248     0776  087E               	movf	btemp,w
   249     0777  008A               	movwf	10
   250     0778  087F               	movf	btemp+1,w
   251     0779  0082               	movwf	2
   252     077A                     init_ram0:	
   253                           ;Called with:
   254                           ;	high address of idata address in btemp 
   255                           ;	low address of idata address in btemp+1 
   256                           ;	low address of data in FSR
   257                           ;	high address + 1 of data in btemp-1
   258                           
   259     077A  120A  118A  2776  120A  118A  	fcall	init_fetch0
   260     077F  0080               	movwf	0
   261     0780  0A84               	incf	4,f
   262     0781  0804               	movf	4,w
   263     0782  067D               	xorwf	btemp+-1,w
   264     0783  1903               	btfsc	3,2
   265     0784  3400               	retlw	0
   266     0785  0AFF               	incf	btemp+1,f
   267     0786  1903               	btfsc	3,2
   268     0787  0AFE               	incf	btemp,f
   269     0788  2F7A               	goto	init_ram0
   270                           
   271                           	psect	cstackCOMMON
   272     007A                     __pcstackCOMMON:
   273     007A                     ?_main:
   274     007A                     ??_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277                           
   278                           ; 1 bytes @ 0x0
   279     007A                     	ds	2
   280                           
   281                           	psect	maintext
   282     0789                     __pmaintext:	
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 24 in file "CONTROLLING_LED_WITH_SWITCH.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;		None
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   297 ;; Tracked objects:
   298 ;;		On entry : B00/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   302 ;;      Params:         0       0       0       0       0
   303 ;;      Locals:         0       0       0       0       0
   304 ;;      Temps:          2       0       0       0       0
   305 ;;      Totals:         2       0       0       0       0
   306 ;;Total ram usage:        2 bytes
   307 ;; This function calls:
   308 ;;		Nothing
   309 ;; This function is called by:
   310 ;;		Startup code after reset
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314     0789                     _main:	
   315                           ;psect for function _main
   316                           
   317     0789                     l619:	
   318                           ;incstack = 0
   319                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1]
   320                           
   321                           
   322                           ;CONTROLLING_LED_WITH_SWITCH.c: 25:     *dir_b=0xF0;
   323     0789  30F0               	movlw	240
   324     078A  1683               	bsf	3,5	;RP0=1, select bank1
   325     078B  1303               	bcf	3,6	;RP1=0, select bank1
   326     078C  0086               	movwf	6
   327     078D                     l621:
   328                           
   329                           ;CONTROLLING_LED_WITH_SWITCH.c: 26:     *dir_c=0x00;
   330     078D  0187               	clrf	7
   331     078E                     l623:
   332                           
   333                           ;CONTROLLING_LED_WITH_SWITCH.c: 27:     *data_b=0x00;
   334     078E  1283               	bcf	3,5	;RP0=0, select bank0
   335     078F  1303               	bcf	3,6	;RP1=0, select bank0
   336     0790  0186               	clrf	6
   337     0791                     l625:
   338                           
   339                           ;CONTROLLING_LED_WITH_SWITCH.c: 28:     *data_c=0x00;
   340     0791  0187               	clrf	7
   341     0792                     l627:
   342                           
   343                           ;CONTROLLING_LED_WITH_SWITCH.c: 29:     *op_reg&=0x78;
   344     0792  3078               	movlw	120
   345     0793  00FF               	movwf	btemp+1
   346     0794  087F               	movf	btemp+1,w
   347     0795  1683               	bsf	3,5	;RP0=1, select bank1
   348     0796  1303               	bcf	3,6	;RP1=0, select bank1
   349     0797  0581               	andwf	1,f
   350     0798                     l629:
   351                           
   352                           ;CONTROLLING_LED_WITH_SWITCH.c: 31:         val=*data_b;
   353     0798  1283               	bcf	3,5	;RP0=0, select bank0
   354     0799  0806               	movf	6,w
   355     079A  00FC               	movwf	_val
   356                           
   357                           ;CONTROLLING_LED_WITH_SWITCH.c: 32:         switch(val){
   358     079B  2FA7               	goto	l641
   359     079C                     l631:
   360     079C  3030               	movlw	48
   361     079D  0087               	movwf	7
   362     079E  2F98               	goto	l629
   363     079F                     l633:
   364     079F  3010               	movlw	16
   365     07A0  0087               	movwf	7
   366     07A1  2F98               	goto	l629
   367     07A2                     l635:
   368     07A2  3020               	movlw	32
   369     07A3  0087               	movwf	7
   370     07A4  2F98               	goto	l629
   371     07A5                     l637:
   372     07A5  0187               	clrf	7
   373     07A6  2F98               	goto	l629
   374     07A7                     l641:
   375     07A7  087C               	movf	_val,w
   376     07A8  00FA               	movwf	??_main
   377     07A9  01FB               	clrf	??_main+1
   378                           
   379                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   380                           ; Switch size 1, requested type "simple"
   381                           ; Number of cases is 1, Range of values is 0 to 0
   382                           ; switch strategies available:
   383                           ; Name         Instructions Cycles
   384                           ; simple_byte            4     3 (average)
   385                           ; direct_byte           11     8 (fixed)
   386                           ; jumptable            260     6 (fixed)
   387                           ;	Chosen strategy is simple_byte
   388     07AA  087B               	movf	??_main+1,w
   389     07AB  3A00               	xorlw	0	; case 0
   390     07AC  1903               	skipnz
   391     07AD  2FAF               	goto	l679
   392     07AE  2FA5               	goto	l637
   393     07AF                     l679:
   394                           
   395                           ; Switch size 1, requested type "simple"
   396                           ; Number of cases is 4, Range of values is 112 to 224
   397                           ; switch strategies available:
   398                           ; Name         Instructions Cycles
   399                           ; simple_byte           13     7 (average)
   400                           ; jumptable            263     9 (fixed)
   401                           ;	Chosen strategy is simple_byte
   402     07AF  087A               	movf	??_main,w
   403     07B0  3A70               	xorlw	112	; case 112
   404     07B1  1903               	skipnz
   405     07B2  2FA5               	goto	l637
   406     07B3  3AC0               	xorlw	192	; case 176
   407     07B4  1903               	skipnz
   408     07B5  2FA2               	goto	l635
   409     07B6  3A60               	xorlw	96	; case 208
   410     07B7  1903               	skipnz
   411     07B8  2F9F               	goto	l633
   412     07B9  3A30               	xorlw	48	; case 224
   413     07BA  1903               	skipnz
   414     07BB  2F9C               	goto	l631
   415     07BC  2FA5               	goto	l637
   416     07BD  120A  118A  2800   	ljmp	start
   417     07C0                     __end_of_main:
   418     007E                     btemp	set	126	;btemp
   419     007E                     wtemp0	set	126
   420                           
   421                           	psect	config
   422                           
   423                           ;Config register CONFIG @ 0x2007
   424                           ;	Oscillator Selection bits
   425                           ;	FOSC = EXTRC, RC oscillator
   426                           ;	Watchdog Timer Enable bit
   427                           ;	WDTE = OFF, WDT disabled
   428                           ;	Power-up Timer Enable bit
   429                           ;	PWRTE = OFF, PWRT disabled
   430                           ;	Brown-out Reset Enable bit
   431                           ;	BOREN = OFF, BOR disabled
   432                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   433                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   434                           ;	Data EEPROM Memory Code Protection bit
   435                           ;	CPD = OFF, Data EEPROM code protection off
   436                           ;	Flash Program Memory Write Enable bits
   437                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   438                           ;	In-Circuit Debugger Mode bit
   439                           ;	DEBUG = 0x1, unprogrammed default
   440                           ;	Flash Program Memory Code Protection bit
   441                           ;	CP = OFF, Code protection off
   442     2007                     	org	8199
   443     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    data_c	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    data_b	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    op_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    dir_c	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    dir_b	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      2       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       D      12        0.0%
ABS                  0      0       D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Sep 16 09:33:44 2023

                      pc 0002                       fsr 0004                      l621 078D  
                    l631 079C                      l623 078E                      l633 079F  
                    l641 07A7                      l625 0791                      l635 07A2  
                    l627 0792                      l619 0789                      l637 07A5  
                    l629 0798                      l679 07AF                      _val 007C  
                    indf 0000                     _main 0789                     btemp 007E  
                   start 0000                    ?_main 007A                    _dir_b 0078  
                  _dir_c 0076                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07C0             __end_of_main 07C0  
                 ??_main 007A                   _data_b 0072                   _data_c 0070  
                 _op_reg 0074             __pdataCOMMON 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 007A               __pnvCOMMON 007C               __pmaintext 0789  
   end_of_initialization 07FC            __pidataCOMMON 076C      start_initialization 07C0  
             init_fetch0 0776                ___latbits 0002                 init_ram0 077A  
